// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                 @id @default(uuid())
  username               String                 @unique
  leetcodeUsername       String?                @unique
  problemsSolved         Problem[]
  summaries              DailySummary[]
  leetCodeVerifications  LeetCodeVerification[]
}

model LeetCodeVerification {
  id                 String                    @id @default(uuid())
  userId             String
  leetcodeUsername   String
  verificationCode   String
  verificationMethod VerificationMethod        @default(PROFILE_BIO)
  isVerified         Boolean                   @default(false)
  verifiedAt         DateTime?
  expiresAt          DateTime
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  user               User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, leetcodeUsername])
  @@index([leetcodeUsername])
  @@index([verificationCode])
}

enum VerificationMethod {
  PROFILE_BIO
  GITHUB_OAUTH
  EMAIL_VERIFICATION
}

model Problem {
  id           String     @id @default(uuid())
  title        String
  leetcodeId   Int
  solvedAt     DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  difficulty   Difficulty @relation(fields: [difficultyId], references: [id])
  difficultyId Int
  tags         Tag[]      @relation("ProblemTags")
  language     Language   @relation(fields: [languageId], references: [id])
  languageId   Int
  timeSpentMin Int
}

model DailySummary {
  id           String   @id @default(uuid())
  date         DateTime
  totalMinutes Int
  user         User     @relation(fields: [userId], references: [id])
  userId       String
}

model Difficulty {
  id       Int       @id @default(autoincrement())
  level    String    @unique // "Easy", "Medium", "Hard"
  problems Problem[]
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  problems Problem[] @relation("ProblemTags")
}

model Language {
  id       Int       @id @default(autoincrement())
  name     String    @unique // "Python", "JavaScript", etc.
  problems Problem[]
}
